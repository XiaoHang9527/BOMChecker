# BOM检查工具修复说明

## 问题一：程序重复启动
### 问题描述
BOM检查工具在打包为exe文件后，处理PDF文件时会再次打开一个程序界面，并且没有正常处理PDF文件。

### 问题原因
这个问题与Python的多进程(multiprocessing)库在Windows环境下的特性有关。当Python程序被打包为exe时，Windows下的进程创建方式与正常的Python脚本执行不同，会导致子进程重新执行主程序的入口点，从而打开新的程序界面。

具体原因：
1. 在Windows上，multiprocessing默认使用"spawn"方式创建新进程，这会重新执行整个程序
2. 当程序被打包为exe后，新进程的创建会导致exe被重新执行，引发GUI重复初始化
3. 程序中没有正确处理在不同运行环境(脚本模式vs打包模式)下的多进程行为差异

### 已实施的修复方案
1. 添加mp.freeze_support()，确保在Windows下打包的exe文件支持多进程
2. 显式设置multiprocessing启动方法为'spawn'
3. 添加环境检测机制，在以下情况使用线程替代进程：
   - 运行在子进程中
   - 程序被打包为exe且运行在Windows系统上
4. 为进程/线程处理添加共享的接口，根据对象类型采取不同的终止策略
5. 在工作进程中增加环境标记，防止递归创建子进程

## 问题二：依赖导入错误
### 问题描述
程序在启动时报错"No module named 'fitz'"，表示找不到PyMuPDF库。

### 问题原因
1. 程序缺少必要的依赖安装
2. 在不同环境（特别是虚拟环境或打包环境）中，依赖包可能不完整
3. 缺少对依赖导入错误的健壮处理机制

### 已实施的修复方案
1. 增加了更健壮的模块导入错误处理：
   - 主程序启动时检查所有必要依赖
   - 显示友好的错误信息和安装指南
   - 在子进程/线程中也进行模块检查
2. 添加了requirements.txt文件，列出所有必要的依赖及版本要求
3. 更新了README.md文档，提供详细的安装说明
4. 在程序入口点增加了完整的依赖检查，确保缺少依赖时给出明确的错误提示

## 技术说明
这些修改确保程序在不同环境中都能正常工作：
- 作为Python脚本运行时使用多进程提高性能
- 作为打包后的exe运行时自动降级为多线程模式
- 防止在Windows环境下多进程递归创建导致的问题
- 在缺少依赖时提供清晰的错误信息和解决方案

## 注意事项
如果在未来的开发中继续使用多进程处理，请确保：
1. 始终在if __name__ == "__main__"块中初始化GUI
2. 考虑程序在不同环境下运行的差异，尤其是Windows下的exe打包
3. 如果需要在子进程中使用GUI相关功能，建议使用多线程而非多进程
4. 为所有关键依赖添加错误处理机制
5. 维护完整的requirements.txt文件，确保用户可以一键安装所有依赖

## 新增修复说明
BOM检查工具 V1.4 修复说明
日期：2025年4月15日

【问题描述】
1. 当BOM文件中的料号列的值是纯数字时，会出现解析失败错误："Can only use .str accessor with string values!"
2. 当处理包含空值(NaN)的BOM文件时，可能会将"nan"显示为位号数量或重复位号

【修复方案】
1. 针对纯数字料号问题：
   - 修改了Excel读取逻辑，强制将所有列转换为字符串类型
   - 在pandas读取时指定dtype=str参数，确保数值列被正确处理为字符串
   - 在创建DataFrame时，为关键列使用astype(str)进行类型转换

2. 针对空值处理问题：
   - 增加了对"nan"字符串的特殊处理，将其替换为空字符串
   - 在验证位号时，增加了对"nan"字符串的过滤逻辑
   - 改进字符串处理机制，确保空值被正确识别和处理

【受影响范围】
- 所有BOM读取和处理逻辑
- PDF注解添加功能
- BOM数据验证功能

【兼容性】
- 本次更新完全向后兼容，无需用户进行任何配置调整
- 对已保存的配置文件和用户设置无影响

【建议】
如遇任何问题，请联系技术支持：微信 XiaoHang_Sky 